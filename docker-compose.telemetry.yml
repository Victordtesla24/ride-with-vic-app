services:
  # Kafka for telemetry data storage
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: rwv-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - telemetry-network
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: rwv-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 24
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - telemetry-network
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Public Key Server - Production-ready HTTPS server for Tesla public key
  public-key-server:
    build:
      context: .
      dockerfile: Dockerfile.public-key-server
    image: tesla-public-key-server:latest
    container_name: rwv-public-key-server
    restart: unless-stopped
    user: node
    ports:
      - "3456:3456"
    volumes:
      - ./public/.well-known:/app/public/.well-known:ro
      - ./config/tesla/keys:/app/config/tesla/keys:ro
      - ./certs/server:/certs/server:ro
    environment:
      - PORT=3456
      - HOST=0.0.0.0
      - NODE_ENV=production
      - TESLA_PUBLIC_KEY_PATH=/app/config/tesla/keys/com.tesla.3p.public-key.pem
      - ENABLE_HTTPS=true
      - SSL_KEY_PATH=/certs/server/server.key
      - SSL_CERT_PATH=/certs/server/server.crt
      - SSL_CA_PATH=/certs/server/ca.crt
    networks:
      - telemetry-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:3456/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rwv-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rwv-grafana
    ports:
      - "3005:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  zookeeper-data:
  kafka-data:
  grafana-data:

networks:
  telemetry-network:
    name: telemetry-network
    driver: bridge
